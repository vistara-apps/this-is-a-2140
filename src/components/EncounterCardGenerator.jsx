// Encounter Card Generator - Creates shareable legal rights cards
import React, { useState, useRef } from 'react';
import { Share, Download, Copy, MapPin, Clock, Shield, AlertCircle, Wand2 } from 'lucide-react';
import { useSubscription } from '../hooks/useSubscription';
import SubscriptionGate from './SubscriptionGate';
import { useEncounterCard } from '../hooks/useEncounterCard';

const EncounterCardGenerator = ({ user, onClose }) => {
  const [cardData, setCardData] = useState(null);
  const [generating, setGenerating] = useState(false);
  const [situation, setSituation] = useState('traffic-stop');
  const [customSituation, setCustomSituation] = useState('');
  const [location, setLocation] = useState(null);
  const cardRef = useRef(null);

  const { hasFeature } = useSubscription();
  const { generateCard, shareCard, downloadCard } = useEncounterCard();

  const situations = [
    { id: 'traffic-stop', label: 'Traffic Stop', description: 'Pulled over by police' },
    { id: 'street-encounter', label: 'Street Encounter', description: 'Approached by officer on street' },
    { id: 'home-visit', label: 'Home Visit', description: 'Police at your door' },
    { id: 'detention', label: 'Detention', description: 'Being detained or questioned' },
    { id: 'arrest', label: 'Arrest', description: 'Being placed under arrest' },
    { id: 'custom', label: 'Custom', description: 'Describe your specific situation' }
  ];

  const handleGenerateCard = async () => {
    try {
      setGenerating(true);

      // Get current location if available
      if (navigator.geolocation && !location) {
        navigator.geolocation.getCurrentPosition((position) => {
          setLocation({
            latitude: position.coords.latitude,
            longitude: position.coords.longitude
          });
        });
      }

      const situationText = situation === 'custom' ? customSituation : 
        situations.find(s => s.id === situation)?.description || situation;

      const result = await generateCard({
        state: user?.state || 'General',
        situation: situationText,
        location,
        language: user?.preferredLanguage || 'en'
      });

      if (result.success) {
        setCardData(result.card);
      } else {
        alert('Failed to generate encounter card: ' + result.error);
      }
    } catch (error) {
      console.error('Error generating card:', error);
      alert('Failed to generate encounter card');
    } finally {
      setGenerating(false);
    }
  };

  const handleShare = async () => {
    if (!cardData) return;

    try {
      const result = await shareCard(cardData);
      if (result.success) {
        alert('Card shared successfully!');
      } else {
        alert('Failed to share card: ' + result.error);
      }
    } catch (error) {
      console.error('Error sharing card:', error);
      alert('Failed to share card');
    }
  };

  const handleDownload = async () => {
    if (!cardData || !cardRef.current) return;

    try {
      const result = await downloadCard(cardRef.current, cardData.title);
      if (!result.success) {
        alert('Failed to download card: ' + result.error);
      }
    } catch (error) {
      console.error('Error downloading card:', error);
      alert('Failed to download card');
    }
  };

  const handleCopyText = async () => {
    if (!cardData) return;

    try {
      const cardText = formatCardAsText(cardData);
      await navigator.clipboard.writeText(cardText);
      alert('Card text copied to clipboard!');
    } catch (error) {
      console.error('Error copying text:', error);
      alert('Failed to copy text');
    }
  };

  const formatCardAsText = (card) => {
    return `
${card.title}
Generated: ${new Date(card.timestamp).toLocaleString()}
State: ${card.state}

YOUR RIGHTS:
${card.rights?.map(right => `• ${right}`).join('\n') || 'Standard constitutional rights apply'}

RECOMMENDED PHRASES:
${card.phrases?.map(phrase => `• "${phrase}"`).join('\n') || 'Exercise your right to remain silent'}

${card.stateSpecific?.length ? `STATE-SPECIFIC INFO:\n${card.stateSpecific.map(info => `• ${info}`).join('\n')}\n` : ''}

DISCLAIMER: ${card.disclaimer}

Generated by Pocket Protector
    `.trim();
  };

  if (!hasFeature('encounterCards')) {
    return (
      <SubscriptionGate 
        feature="encounterCards"
        upgradeMessage="Generate shareable encounter cards with AI-powered, location-specific legal guidance. Upgrade to Premium to access this feature."
      >
        <div className="p-8 text-center">
          <Shield className="w-16 h-16 mx-auto mb-4 text-gray-400" />
          <h3 className="text-xl font-semibold text-white mb-2">Encounter Card Generator</h3>
          <p className="text-gray-400">Create personalized legal rights cards for any situation</p>
        </div>
      </SubscriptionGate>
    );
  }

  return (
    <div className="max-w-2xl mx-auto px-4 py-6">
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-white mb-2">Encounter Card Generator</h1>
        <p className="text-gray-300">
          Create a personalized legal rights card for your specific situation
        </p>
      </div>

      {/* Situation Selection */}
      <div className="bg-surface rounded-lg p-6 mb-6 border border-gray-700">
        <h3 className="text-lg font-semibold text-white mb-4">Select Situation</h3>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
          {situations.map((sit) => (
            <button
              key={sit.id}
              onClick={() => setSituation(sit.id)}
              className={`p-3 rounded-lg border text-left transition-colors ${
                situation === sit.id
                  ? 'border-accent bg-accent/10 text-white'
                  : 'border-gray-700 hover:border-gray-600 text-gray-300'
              }`}
            >
              <div className="font-medium">{sit.label}</div>
              <div className="text-sm text-gray-400">{sit.description}</div>
            </button>
          ))}
        </div>

        {situation === 'custom' && (
          <div className="mt-4">
            <textarea
              value={customSituation}
              onChange={(e) => setCustomSituation(e.target.value)}
              placeholder="Describe your specific situation..."
              className="w-full p-3 bg-bg text-white rounded-md border border-gray-700 focus:border-accent focus:outline-none resize-none"
              rows={3}
            />
          </div>
        )}
      </div>

      {/* Location Info */}
      <div className="bg-surface rounded-lg p-4 mb-6 border border-gray-700">
        <div className="flex items-center space-x-2 text-gray-300">
          <MapPin className="w-4 h-4" />
          <span className="text-sm">
            {location 
              ? `Location: ${location.latitude.toFixed(4)}, ${location.longitude.toFixed(4)}`
              : 'Location will be included if available'
            }
          </span>
        </div>
      </div>

      {/* Generate Button */}
      <button
        onClick={handleGenerateCard}
        disabled={generating || (situation === 'custom' && !customSituation.trim())}
        className="w-full bg-accent hover:bg-teal-600 text-white py-3 rounded-md font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2 mb-6"
      >
        {generating ? (
          <div className="w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
        ) : (
          <>
            <Wand2 className="w-5 h-5" />
            <span>Generate Encounter Card</span>
          </>
        )}
      </button>

      {/* Generated Card */}
      {cardData && (
        <div className="space-y-6">
          <div 
            ref={cardRef}
            className="bg-white text-black rounded-lg p-6 border-2 border-gray-300"
            style={{ fontFamily: 'system-ui, sans-serif' }}
          >
            {/* Card Header */}
            <div className="border-b-2 border-gray-300 pb-4 mb-4">
              <h2 className="text-xl font-bold text-center">{cardData.title}</h2>
              <div className="flex items-center justify-between text-sm text-gray-600 mt-2">
                <div className="flex items-center space-x-1">
                  <Clock className="w-4 h-4" />
                  <span>{new Date(cardData.timestamp).toLocaleString()}</span>
                </div>
                <div className="flex items-center space-x-1">
                  <MapPin className="w-4 h-4" />
                  <span>{cardData.state}</span>
                </div>
              </div>
            </div>

            {/* Rights Section */}
            <div className="mb-4">
              <h3 className="font-bold text-lg mb-2 flex items-center space-x-2">
                <Shield className="w-5 h-5" />
                <span>YOUR RIGHTS</span>
              </h3>
              <ul className="space-y-1">
                {cardData.rights?.map((right, index) => (
                  <li key={index} className="flex items-start space-x-2">
                    <span className="text-accent font-bold">•</span>
                    <span className="text-sm">{right}</span>
                  </li>
                ))}
              </ul>
            </div>

            {/* Phrases Section */}
            {cardData.phrases?.length > 0 && (
              <div className="mb-4">
                <h3 className="font-bold text-lg mb-2">RECOMMENDED PHRASES</h3>
                <ul className="space-y-1">
                  {cardData.phrases.map((phrase, index) => (
                    <li key={index} className="text-sm">
                      <span className="text-accent font-bold">•</span> "{phrase}"
                    </li>
                  ))}
                </ul>
              </div>
            )}

            {/* State Specific */}
            {cardData.stateSpecific?.length > 0 && (
              <div className="mb-4">
                <h3 className="font-bold text-lg mb-2">{cardData.state} SPECIFIC</h3>
                <ul className="space-y-1">
                  {cardData.stateSpecific.map((info, index) => (
                    <li key={index} className="flex items-start space-x-2">
                      <span className="text-accent font-bold">•</span>
                      <span className="text-sm">{info}</span>
                    </li>
                  ))}
                </ul>
              </div>
            )}

            {/* Disclaimer */}
            <div className="border-t-2 border-gray-300 pt-4 mt-4">
              <div className="flex items-start space-x-2">
                <AlertCircle className="w-4 h-4 text-red-600 mt-0.5 flex-shrink-0" />
                <p className="text-xs text-gray-600">{cardData.disclaimer}</p>
              </div>
              <p className="text-xs text-gray-500 mt-2 text-center">
                Generated by Pocket Protector
              </p>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex flex-wrap gap-3">
            <button
              onClick={handleShare}
              className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md font-medium transition-colors flex items-center justify-center space-x-2"
            >
              <Share className="w-4 h-4" />
              <span>Share</span>
            </button>
            <button
              onClick={handleDownload}
              className="flex-1 bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-md font-medium transition-colors flex items-center justify-center space-x-2"
            >
              <Download className="w-4 h-4" />
              <span>Download</span>
            </button>
            <button
              onClick={handleCopyText}
              className="flex-1 bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded-md font-medium transition-colors flex items-center justify-center space-x-2"
            >
              <Copy className="w-4 h-4" />
              <span>Copy Text</span>
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default EncounterCardGenerator;

